{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  libraries needed "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/maramabdullah/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "# we'll want this for plotting\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "#preprocessing\n",
    "import re\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import nltk\n",
    "from nltk.corpus import stopwords \n",
    "nltk.download('stopwords')\n",
    "\n",
    "\n",
    "#modling\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn import metrics\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Step 1: Reading the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the data from csv file \n",
    "data= pd.read_csv(\"gender_classfication.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unit_id</th>\n",
       "      <th>golden</th>\n",
       "      <th>unit_state</th>\n",
       "      <th>trusted_judgments</th>\n",
       "      <th>last_judgment_at</th>\n",
       "      <th>gender</th>\n",
       "      <th>gender_confidence</th>\n",
       "      <th>profile_yn</th>\n",
       "      <th>profile_yn_confidence</th>\n",
       "      <th>created</th>\n",
       "      <th>...</th>\n",
       "      <th>profileimage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>sidebar_color</th>\n",
       "      <th>text</th>\n",
       "      <th>tweet_coord</th>\n",
       "      <th>tweet_count</th>\n",
       "      <th>tweet_created</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>tweet_location</th>\n",
       "      <th>user_timezone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>815719226</td>\n",
       "      <td>False</td>\n",
       "      <td>finalized</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-10-26T23:24:00</td>\n",
       "      <td>male</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2013-12-05T01:48:00</td>\n",
       "      <td>...</td>\n",
       "      <td>https://pbs.twimg.com/profile_images/414342229...</td>\n",
       "      <td>0</td>\n",
       "      <td>FFFFFF</td>\n",
       "      <td>Robbie E Responds To Critics After Win Against...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110964</td>\n",
       "      <td>2015-10-26T12:40:00</td>\n",
       "      <td>658730000000000000</td>\n",
       "      <td>main; @Kan1shk3</td>\n",
       "      <td>Chennai</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>815719227</td>\n",
       "      <td>False</td>\n",
       "      <td>finalized</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-10-26T23:30:00</td>\n",
       "      <td>male</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012-10-01T13:51:00</td>\n",
       "      <td>...</td>\n",
       "      <td>https://pbs.twimg.com/profile_images/539604221...</td>\n",
       "      <td>0</td>\n",
       "      <td>C0DEED</td>\n",
       "      <td>���It felt like they were my friends and I was...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7471</td>\n",
       "      <td>2015-10-26T12:40:00</td>\n",
       "      <td>658730000000000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Eastern Time (US &amp; Canada)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>815719236</td>\n",
       "      <td>False</td>\n",
       "      <td>finalized</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-10-26T23:17:00</td>\n",
       "      <td>brand</td>\n",
       "      <td>0.7002</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2011-11-16T17:14:00</td>\n",
       "      <td>...</td>\n",
       "      <td>https://pbs.twimg.com/profile_images/653518467...</td>\n",
       "      <td>0</td>\n",
       "      <td>C0DEED</td>\n",
       "      <td>how are you taking care of yourself? https://t...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5179</td>\n",
       "      <td>2015-10-26T12:40:00</td>\n",
       "      <td>658730000000000000</td>\n",
       "      <td>New York</td>\n",
       "      <td>Atlantic Time (Canada)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>815719326</td>\n",
       "      <td>False</td>\n",
       "      <td>finalized</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-10-26T23:09:00</td>\n",
       "      <td>female</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012-07-23T22:34:00</td>\n",
       "      <td>...</td>\n",
       "      <td>https://pbs.twimg.com/profile_images/651146254...</td>\n",
       "      <td>0</td>\n",
       "      <td>C0DEED</td>\n",
       "      <td>The accuracy though lol  https://t.co/frFforEeLC</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5244</td>\n",
       "      <td>2015-10-26T12:40:00</td>\n",
       "      <td>658730000000000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>815720233</td>\n",
       "      <td>False</td>\n",
       "      <td>finalized</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-10-27T00:27:00</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0.6792</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2009-12-29T13:33:00</td>\n",
       "      <td>...</td>\n",
       "      <td>https://pbs.twimg.com/profile_images/656886222...</td>\n",
       "      <td>0</td>\n",
       "      <td>FFFFFF</td>\n",
       "      <td>the force awakens even if he comes out on dec ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33149</td>\n",
       "      <td>2015-10-26T12:40:00</td>\n",
       "      <td>658730000000000000</td>\n",
       "      <td>kylo ren' sidekick</td>\n",
       "      <td>Brussels</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     unit_id  golden unit_state  trusted_judgments     last_judgment_at  \\\n",
       "0  815719226   False  finalized                  3  2015-10-26T23:24:00   \n",
       "1  815719227   False  finalized                  3  2015-10-26T23:30:00   \n",
       "2  815719236   False  finalized                  3  2015-10-26T23:17:00   \n",
       "3  815719326   False  finalized                  3  2015-10-26T23:09:00   \n",
       "4  815720233   False  finalized                  3  2015-10-27T00:27:00   \n",
       "\n",
       "    gender  gender_confidence  profile_yn  profile_yn_confidence  \\\n",
       "0     male             1.0000        True                    1.0   \n",
       "1     male             1.0000        True                    1.0   \n",
       "2    brand             0.7002        True                    1.0   \n",
       "3   female             1.0000        True                    1.0   \n",
       "4  unknown             0.6792        True                    1.0   \n",
       "\n",
       "               created             ...              \\\n",
       "0  2013-12-05T01:48:00             ...               \n",
       "1  2012-10-01T13:51:00             ...               \n",
       "2  2011-11-16T17:14:00             ...               \n",
       "3  2012-07-23T22:34:00             ...               \n",
       "4  2009-12-29T13:33:00             ...               \n",
       "\n",
       "                                        profileimage  retweet_count  \\\n",
       "0  https://pbs.twimg.com/profile_images/414342229...              0   \n",
       "1  https://pbs.twimg.com/profile_images/539604221...              0   \n",
       "2  https://pbs.twimg.com/profile_images/653518467...              0   \n",
       "3  https://pbs.twimg.com/profile_images/651146254...              0   \n",
       "4  https://pbs.twimg.com/profile_images/656886222...              0   \n",
       "\n",
       "  sidebar_color                                               text  \\\n",
       "0        FFFFFF  Robbie E Responds To Critics After Win Against...   \n",
       "1        C0DEED  ���It felt like they were my friends and I was...   \n",
       "2        C0DEED  how are you taking care of yourself? https://t...   \n",
       "3        C0DEED   The accuracy though lol  https://t.co/frFforEeLC   \n",
       "4        FFFFFF  the force awakens even if he comes out on dec ...   \n",
       "\n",
       "  tweet_coord tweet_count        tweet_created            tweet_id  \\\n",
       "0         NaN      110964  2015-10-26T12:40:00  658730000000000000   \n",
       "1         NaN        7471  2015-10-26T12:40:00  658730000000000000   \n",
       "2         NaN        5179  2015-10-26T12:40:00  658730000000000000   \n",
       "3         NaN        5244  2015-10-26T12:40:00  658730000000000000   \n",
       "4         NaN       33149  2015-10-26T12:40:00  658730000000000000   \n",
       "\n",
       "       tweet_location               user_timezone  \n",
       "0     main; @Kan1shk3                     Chennai  \n",
       "1                 NaN  Eastern Time (US & Canada)  \n",
       "2            New York      Atlantic Time (Canada)  \n",
       "3                 NaN                         NaN  \n",
       "4  kylo ren' sidekick                    Brussels  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# represent the first 5 rows of dataset \n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20050, 26)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rows and columens \n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20050 entries, 0 to 20049\n",
      "Data columns (total 26 columns):\n",
      "unit_id                  20050 non-null int64\n",
      "golden                   20050 non-null bool\n",
      "unit_state               20050 non-null object\n",
      "trusted_judgments        20050 non-null int64\n",
      "last_judgment_at         20000 non-null object\n",
      "gender                   19953 non-null object\n",
      "gender_confidence        20024 non-null float64\n",
      "profile_yn               20050 non-null bool\n",
      "profile_yn_confidence    20050 non-null float64\n",
      "created                  20050 non-null object\n",
      "description              16306 non-null object\n",
      "fav_number               20050 non-null int64\n",
      "gender_gold              50 non-null object\n",
      "link_color               20050 non-null object\n",
      "name                     20050 non-null object\n",
      "profile_yn_gold          50 non-null object\n",
      "profileimage             20050 non-null object\n",
      "retweet_count            20050 non-null int64\n",
      "sidebar_color            20050 non-null object\n",
      "text                     20050 non-null object\n",
      "tweet_coord              159 non-null object\n",
      "tweet_count              20050 non-null int64\n",
      "tweet_created            20050 non-null object\n",
      "tweet_id                 20050 non-null int64\n",
      "tweet_location           12559 non-null object\n",
      "user_timezone            12252 non-null object\n",
      "dtypes: bool(2), float64(2), int64(6), object(16)\n",
      "memory usage: 3.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# print all columens name with related information \n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['unit_id', 'golden', 'unit_state', 'trusted_judgments',\n",
       "       'last_judgment_at', 'gender', 'gender_confidence', 'profile_yn',\n",
       "       'profile_yn_confidence', 'created', 'description', 'fav_number',\n",
       "       'gender_gold', 'link_color', 'name', 'profile_yn_gold', 'profileimage',\n",
       "       'retweet_count', 'sidebar_color', 'text', 'tweet_coord', 'tweet_count',\n",
       "       'tweet_created', 'tweet_id', 'tweet_location', 'user_timezone'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unit_id</th>\n",
       "      <th>trusted_judgments</th>\n",
       "      <th>gender_confidence</th>\n",
       "      <th>profile_yn_confidence</th>\n",
       "      <th>fav_number</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>tweet_count</th>\n",
       "      <th>tweet_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.005000e+04</td>\n",
       "      <td>20050.000000</td>\n",
       "      <td>20024.000000</td>\n",
       "      <td>20050.000000</td>\n",
       "      <td>20050.000000</td>\n",
       "      <td>20050.000000</td>\n",
       "      <td>2.005000e+04</td>\n",
       "      <td>2.005000e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.157294e+08</td>\n",
       "      <td>3.615711</td>\n",
       "      <td>0.882756</td>\n",
       "      <td>0.993221</td>\n",
       "      <td>4382.201646</td>\n",
       "      <td>0.079401</td>\n",
       "      <td>3.892469e+04</td>\n",
       "      <td>6.587350e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.000801e+03</td>\n",
       "      <td>12.331890</td>\n",
       "      <td>0.191403</td>\n",
       "      <td>0.047168</td>\n",
       "      <td>12518.575919</td>\n",
       "      <td>2.649751</td>\n",
       "      <td>1.168371e+05</td>\n",
       "      <td>5.000124e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>8.157192e+08</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.627200</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>6.587300e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.157243e+08</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.677800</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.398000e+03</td>\n",
       "      <td>6.587300e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.157294e+08</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>456.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.144150e+04</td>\n",
       "      <td>6.587300e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.157345e+08</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3315.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.002750e+04</td>\n",
       "      <td>6.587400e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.157580e+08</td>\n",
       "      <td>274.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>341621.000000</td>\n",
       "      <td>330.000000</td>\n",
       "      <td>2.680199e+06</td>\n",
       "      <td>6.587400e+17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            unit_id  trusted_judgments  gender_confidence  \\\n",
       "count  2.005000e+04       20050.000000       20024.000000   \n",
       "mean   8.157294e+08           3.615711           0.882756   \n",
       "std    6.000801e+03          12.331890           0.191403   \n",
       "min    8.157192e+08           3.000000           0.000000   \n",
       "25%    8.157243e+08           3.000000           0.677800   \n",
       "50%    8.157294e+08           3.000000           1.000000   \n",
       "75%    8.157345e+08           3.000000           1.000000   \n",
       "max    8.157580e+08         274.000000           1.000000   \n",
       "\n",
       "       profile_yn_confidence     fav_number  retweet_count   tweet_count  \\\n",
       "count           20050.000000   20050.000000   20050.000000  2.005000e+04   \n",
       "mean                0.993221    4382.201646       0.079401  3.892469e+04   \n",
       "std                 0.047168   12518.575919       2.649751  1.168371e+05   \n",
       "min                 0.627200       0.000000       0.000000  1.000000e+00   \n",
       "25%                 1.000000      11.000000       0.000000  2.398000e+03   \n",
       "50%                 1.000000     456.000000       0.000000  1.144150e+04   \n",
       "75%                 1.000000    3315.500000       0.000000  4.002750e+04   \n",
       "max                 1.000000  341621.000000     330.000000  2.680199e+06   \n",
       "\n",
       "           tweet_id  \n",
       "count  2.005000e+04  \n",
       "mean   6.587350e+17  \n",
       "std    5.000124e+12  \n",
       "min    6.587300e+17  \n",
       "25%    6.587300e+17  \n",
       "50%    6.587300e+17  \n",
       "75%    6.587400e+17  \n",
       "max    6.587400e+17  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe() #You can look at summary of numerical fields by using describe() function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Cleaning the data\n",
    "- Create a bar chart showing how many missing values are in each column\n",
    "- Which column has the most NaN values? How many cells in that column are empty?\n",
    "\n",
    "Note: NaN, empty, and missing are synonymous."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unit_id                      0\n",
       "golden                       0\n",
       "unit_state                   0\n",
       "trusted_judgments            0\n",
       "last_judgment_at            50\n",
       "gender                      97\n",
       "gender_confidence           26\n",
       "profile_yn                   0\n",
       "profile_yn_confidence        0\n",
       "created                      0\n",
       "description               3744\n",
       "fav_number                   0\n",
       "gender_gold              20000\n",
       "link_color                   0\n",
       "name                         0\n",
       "profile_yn_gold          20000\n",
       "profileimage                 0\n",
       "retweet_count                0\n",
       "sidebar_color                0\n",
       "text                         0\n",
       "tweet_coord              19891\n",
       "tweet_count                  0\n",
       "tweet_created                0\n",
       "tweet_id                     0\n",
       "tweet_location            7491\n",
       "user_timezone             7798\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null values \n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot bar chart showing how many missing values are in each column\n",
    "data.isnull().sum().plot(kind=\"bar\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "female     6700\n",
       "male       6194\n",
       "brand      5942\n",
       "unknown    1117\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# value in our target \n",
    "data.gender.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove brand and unknown from target \n",
    "data=data[data['gender']!= 'brand']\n",
    "data=data[data['gender']!='unknown']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "female    6700\n",
       "male      6194\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to check \n",
    "data.gender.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill null \n",
    "values = {'description':' no description',\n",
    "         'text':'',\n",
    "         'gender_gold':\"\",\n",
    "          'profile_yn_gold':'',\n",
    "          'gender:confidence':'',\n",
    "          '_last_judgment_at':'',\n",
    "          'tweet_location':'',\n",
    "          'user_timezone':'',\n",
    "          'tweet_coord':''  \n",
    "         }\n",
    "data.fillna(value=values,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#drop nulls \n",
    "data.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.drop('gender_gold', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cleaning(s):\n",
    "    s = str(s)\n",
    "    s = s.lower()\n",
    "    s = re.sub('\\s\\W',' ',s)\n",
    "    s = re.sub('\\W,\\s',' ',s)\n",
    "    s = re.sub(r'[^\\w]', ' ', s)\n",
    "    s = re.sub(\"\\d+\", \"\", s)\n",
    "    s = re.sub('\\s+',' ',s)\n",
    "    s = re.sub('[!@#$_]', '', s)\n",
    "    s = s.replace(\"co\",\"\")\n",
    "    s = s.replace(\"https\",\"\")\n",
    "    s = s.replace(\",\",\"\")\n",
    "    s = s.replace(\"[\\w*\",\" \")\n",
    "    s = s.replace('ù',\" \")\n",
    "    s = s.replace('ü',\" \")\n",
    "    s  = s.replace('òit',\" \")\n",
    "    s  = s.replace('å',\" \")\n",
    "    s  = s.replace('û',\" \")  \n",
    "    return s\n",
    "\n",
    "data['Tweets'] = [cleaning(s) for s in data['text']]\n",
    "data['Description'] = [cleaning(s) for s in data['description']]\n",
    "\n",
    "\n",
    "stop = set(stopwords.words('english'))\n",
    "data['Tweets'] = data['Tweets'].str.lower().str.split()\n",
    "data['Tweets'] = data['Tweets'].apply(lambda x : [item for item in x if item not in stop])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['unit_id', 'golden', 'unit_state', 'trusted_judgments',\n",
       "       'last_judgment_at', 'gender', 'gender_confidence', 'profile_yn',\n",
       "       'profile_yn_confidence', 'created', 'description', 'fav_number',\n",
       "       'gender_gold', 'link_color', 'name', 'profile_yn_gold', 'profileimage',\n",
       "       'retweet_count', 'sidebar_color', 'text', 'tweet_coord', 'tweet_count',\n",
       "       'tweet_created', 'tweet_id', 'tweet_location', 'user_timezone',\n",
       "       'Tweets', 'Description'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        [robbie, e, responds, critics, win, eddie, edw...\n",
       "1        [felt, like, friends, living, story, arngeyhno...\n",
       "3                      [accuracy, though, lol, frfforeelc]\n",
       "5               [sarahgbass, said, talk, rachel, actually]\n",
       "7        [mplete, swoof, sphinx, wonder, build, ultimat...\n",
       "8           [opejani, fa, cup, final, league, cup, aswell]\n",
       "9        [one, way, ticket, place, demons, go, wind, ch...\n",
       "10       [patriotic, eyeglass, holder, chain, set, knit...\n",
       "11       [low, key, miss, high, school, dominican, hous...\n",
       "12       [going, see, sos, belgium, still, follow, proj...\n",
       "13       [junckereu, martinschulz, good, friend, erdoga...\n",
       "14       [number, crunching, past, day, new, followers,...\n",
       "16       [roommate, listening, beyonc, ncert, crimping,...\n",
       "17                       [musicsgf, next, dog, name, stop]\n",
       "18       [hilton, steak, wine, gooooooooood, fun, puawiro]\n",
       "19       [getting, sent, tropical, lyme, disease, speci...\n",
       "20       [enjoying, last, lunch, together, drives, next...\n",
       "21       [csamanthamumba, yessssss, tells, u, ur, beaut...\n",
       "22          [need, get, new, wig, brush, wigs, get, money]\n",
       "26       [hiiiijac, kbombdotm, room, still, drunk, tryi...\n",
       "28       [try, get, life, together, niggas, ntinue, try...\n",
       "29       [back, follow, treatments, least, good, spirit...\n",
       "30       [knowhowtohelp, laptop, written, without, nsen...\n",
       "31       [paulangone, thank, inspiring, eye, opening, k...\n",
       "32          [mind, wonders, negativity, positivity, mixed]\n",
       "34       [martmartin, lol, treat, get, aldi, cheap, chi...\n",
       "36                        [wax, first, time, almost, died]\n",
       "37       [kdugdalemsp, meanwhile, lords, allowed, tory,...\n",
       "38       [essay, due, wednesday, still, started, yet, c...\n",
       "39       [dad, asked, want, fag, heard, fact, said, sur...\n",
       "                               ...                        \n",
       "20000    [ming, bye, week, rerd, seniors, w, robwgray, ...\n",
       "20005                 [like, new, face, filters, snapchat]\n",
       "20009    [laughwithusblog, keep, tabs, kids, treatyourf...\n",
       "20012    [discipline, starts, every, day, first, alarm,...\n",
       "20013                 [ultimate, goal, get, married, kids]\n",
       "20014    [theonlyryann, ntributions, thank, one, best, ...\n",
       "20016    [lunch, served, chickfilalnk, stopped, newsroo...\n",
       "20018    [dantemms, th, minute, away, winner, replay, g...\n",
       "20019                 [mjones, susest, thing, ever, heard]\n",
       "20020    [harrystyles, beautiful, voice, never, fails, ...\n",
       "20021    [amount, money, people, willing, pay, weed, br...\n",
       "20022                     [legging, prayer, circle, ikiio]\n",
       "20023    [get, holy, water, boil, hell, joke, lol, funn...\n",
       "20024    [thehalocarter, let, real, probably, drunkenly...\n",
       "20025      [nfuse, people, always, around, people, always]\n",
       "20026    [please, take, moment, read, bookreview, rolle...\n",
       "20027    [sleatherbury, ceturner, bringthenoyes, yeah, ...\n",
       "20030    [kent, island, gets, back, back, rners, first,...\n",
       "20031    [looking, forward, afternoon, derry, lecture, ...\n",
       "20032    [going, week, almost, time, power, premiere, b...\n",
       "20034    [check, largest, pink, diamond, ever, auctione...\n",
       "20035          [like, reward, wanted, money, kept, wallet]\n",
       "20036      [drkiddiii, might, funniest, thing, ever, said]\n",
       "20039    [problem, masses, feel, like, ntrolled, democr...\n",
       "20043    [junglestrikeguy, fighting, getting, gov, regi...\n",
       "20045                 [merchaway, nah, man, skeleton, war]\n",
       "20046    [house, science, mmittee, worse, benghazi, mmi...\n",
       "20047    [thelilone, yeah, get, mean, ones, last, night...\n",
       "20048    [ella, sending, video, eating, cheese, string,...\n",
       "20049    [join, marie, callender, theuso, bringing, lit...\n",
       "Name: Tweets, Length: 12858, dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Tweets']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "Male = data[data['gender'] == 'male']\n",
    "Female = data[data['gender'] == 'female']\n",
    "Male_Words = pd.Series(' '.join(Male['Tweets'].astype(str)).lower().split(\" \")).value_counts()[:20]\n",
    "Female_Words = pd.Series(' '.join(Female['Tweets'].astype(str)).lower().split(\" \")).value_counts()[:20]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a22b2d470>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "Female_Words.plot(kind='bar',stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a185a87f0>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Male_Words.plot(kind='bar',stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#shows the frequency distribution of the gender column\n",
    "gender_count = data.gender.value_counts()\n",
    "sns.set(style=\"darkgrid\")\n",
    "sns.barplot(gender_count.index, gender_count.values, alpha=0.9)\n",
    "plt.title('Frequency Distribution of gender ',fontsize=20)\n",
    "plt.ylabel('Number of Occurrences', fontsize=16)\n",
    "plt.xlabel('gender', fontsize=16)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "419"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check  \n",
    "len(data.sidebar_color.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=data.drop(['text','unit_id','description','profileimage','gender_confidence',\n",
    "                'created','tweet_id','Tweets', 'Description'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2015-10-26T12:40:00    4829\n",
       "2015-10-26T13:19:00    4204\n",
       "2015-10-26T13:20:00    2584\n",
       "2015-10-26T12:39:00    1024\n",
       "2015-10-26T13:18:00     217\n",
       "Name: tweet_created, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.tweet_created.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#shows the frequency distribution of the gender column\n",
    "data.user_timezone.value_counts()[:20].plot(kind='barh');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['golden', 'unit_state', 'trusted_judgments', 'last_judgment_at',\n",
       "       'gender', 'profile_yn', 'profile_yn_confidence', 'fav_number',\n",
       "       'gender_gold', 'link_color', 'name', 'profile_yn_gold', 'retweet_count',\n",
       "       'sidebar_color', 'tweet_coord', 'tweet_count', 'tweet_created',\n",
       "       'tweet_location', 'user_timezone'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4 : preprocessing\n",
    "- convert catgorical varibles before modling \n",
    "- using LabelEncoder() for target \n",
    "- using get_dummies for features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5199097837921917\n"
     ]
    }
   ],
   "source": [
    "#convert target by using LabelEncoder\n",
    "le = preprocessing.LabelEncoder()\n",
    "le.fit(data.gender)\n",
    "le.classes_  \n",
    "y=le.transform(data.gender)\n",
    "\n",
    "print(max(pd.Series(y).value_counts(normalize=True)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['female', 'male'], dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "le.classes_  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dummie_non_numeric(df):\n",
    "    non_numeric_cols = list(set(df.columns)-set(df._get_numeric_data().sum().index))\n",
    "    dummies = pd.get_dummies(df[non_numeric_cols])\n",
    "    new = pd.concat([df, dummies],axis=1)\n",
    "    return new\n",
    "\n",
    "data=dummie_non_numeric(data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Step 5 : features selection "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# comment tfidf vectorization\n",
    "#s_color=pd.get_dummies(data.sidebar_color,prefix='s'). iloc[:,1:]\n",
    "#l_color=pd.get_dummies(data.link_color, prefix='l'). iloc[:,1:]\n",
    "#data=pd.concat([data,s_color],axis=1)\n",
    "#data=pd.concat([data,l_color],axis=1)\n",
    "# define our Features and target \n",
    "features=data.drop(['gender','sidebar_color','link_color','unit_state','last_judgment_at','name',\n",
    "                    'gender_gold','profile_yn_gold','tweet_coord','tweet_created','tweet_location',\n",
    "                    'user_timezone','golden','profile_yn','profile_yn_confidence',\n",
    "                    'female','male'], axis=1)\n",
    "labels = y\n",
    "# train test split \n",
    "X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state = 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name_0nlyonthursdays</th>\n",
       "      <th>name_0nlyyyHER_</th>\n",
       "      <th>name_1000Jasus</th>\n",
       "      <th>name_1001coupons</th>\n",
       "      <th>name_1010xl_T_Wigg</th>\n",
       "      <th>name_108AmyJ</th>\n",
       "      <th>name_10_manhood</th>\n",
       "      <th>name_10printhelloweb</th>\n",
       "      <th>name_10stopphoto</th>\n",
       "      <th>name_11Ashcroft</th>\n",
       "      <th>...</th>\n",
       "      <th>link_color_FFB700</th>\n",
       "      <th>link_color_FFB8F5</th>\n",
       "      <th>link_color_FFBAE1</th>\n",
       "      <th>link_color_FFC7F4</th>\n",
       "      <th>link_color_FFCBA4</th>\n",
       "      <th>link_color_FFCC4D</th>\n",
       "      <th>link_color_FFCCCC</th>\n",
       "      <th>link_color_FFD5BA</th>\n",
       "      <th>link_color_FFD700</th>\n",
       "      <th>link_color_FFFFFF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42598 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   name_0nlyonthursdays  name_0nlyyyHER_  name_1000Jasus  name_1001coupons  \\\n",
       "0                     0                0               0                 0   \n",
       "1                     0                0               0                 0   \n",
       "3                     0                0               0                 0   \n",
       "5                     0                0               0                 0   \n",
       "7                     0                0               0                 0   \n",
       "\n",
       "   name_1010xl_T_Wigg  name_108AmyJ  name_10_manhood  name_10printhelloweb  \\\n",
       "0                   0             0                0                     0   \n",
       "1                   0             0                0                     0   \n",
       "3                   0             0                0                     0   \n",
       "5                   0             0                0                     0   \n",
       "7                   0             0                0                     0   \n",
       "\n",
       "   name_10stopphoto  name_11Ashcroft        ...          link_color_FFB700  \\\n",
       "0                 0                0        ...                          0   \n",
       "1                 0                0        ...                          0   \n",
       "3                 0                0        ...                          0   \n",
       "5                 0                0        ...                          0   \n",
       "7                 0                0        ...                          0   \n",
       "\n",
       "   link_color_FFB8F5  link_color_FFBAE1  link_color_FFC7F4  link_color_FFCBA4  \\\n",
       "0                  0                  0                  0                  0   \n",
       "1                  0                  0                  0                  0   \n",
       "3                  0                  0                  0                  0   \n",
       "5                  0                  0                  0                  0   \n",
       "7                  0                  0                  0                  0   \n",
       "\n",
       "   link_color_FFCC4D  link_color_FFCCCC  link_color_FFD5BA  link_color_FFD700  \\\n",
       "0                  0                  0                  0                  0   \n",
       "1                  0                  0                  0                  0   \n",
       "3                  0                  0                  0                  0   \n",
       "5                  0                  0                  0                  0   \n",
       "7                  0                  0                  0                  0   \n",
       "\n",
       "   link_color_FFFFFF  \n",
       "0                  0  \n",
       "1                  0  \n",
       "3                  0  \n",
       "5                  0  \n",
       "7                  0  \n",
       "\n",
       "[5 rows x 42598 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.iloc[:,20:].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['trusted_judgments', 'fav_number', 'retweet_count', 'tweet_count',\n",
       "       'tweet_created_2015-10-26T12:39:00',\n",
       "       'tweet_created_2015-10-26T12:40:00',\n",
       "       'tweet_created_2015-10-26T13:18:00',\n",
       "       'tweet_created_2015-10-26T13:19:00',\n",
       "       'tweet_created_2015-10-26T13:20:00', 'name_0154_GUTIERREZ',\n",
       "       ...\n",
       "       'link_color_FFB700', 'link_color_FFB8F5', 'link_color_FFBAE1',\n",
       "       'link_color_FFC7F4', 'link_color_FFCBA4', 'link_color_FFCC4D',\n",
       "       'link_color_FFCCCC', 'link_color_FFD5BA', 'link_color_FFD700',\n",
       "       'link_color_FFFFFF'],\n",
       "      dtype='object', length=42618)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12858, 42618)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    6685\n",
      "1    6173\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(pd.Series(y).value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standrized features \n",
    "ss = StandardScaler()\n",
    "data_ss = ss.fit_transform(features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6 : Modling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "model_name\n",
       "LinearSVC                 0.987480\n",
       "RandomForestClassifier    0.955041\n",
       "Name: accuracy, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create list contain of classfication models \n",
    "models = [\n",
    "    RandomForestClassifier(n_estimators=50, max_depth=5, random_state=42),\n",
    "    LinearSVC(),\n",
    "]\n",
    "\n",
    "CV = 10\n",
    "cv_df = pd.DataFrame(index=range(CV * len(models)))\n",
    "entries = []\n",
    "for model in models:\n",
    "    model_name = model.__class__.__name__\n",
    "    accuracies = cross_val_score(model, features, labels, scoring='accuracy', cv=CV)\n",
    "    for fold_idx, accuracy in enumerate(accuracies):\n",
    "        entries.append((model_name, fold_idx, accuracy))\n",
    "cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])\n",
    "\n",
    "cv_df.groupby('model_name').accuracy.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Models Accuracy Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='model_name', y='accuracy', data=cv_df)\n",
    "sns.stripplot(x='model_name', y='accuracy', data=cv_df, \n",
    "              size=8, jitter=True, edgecolor=\"gray\", linewidth=2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import classification_report\n",
    "svc_roc_auc = roc_auc_score(y_test,model.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "fpr, tpr, thresholds = roc_curve(y_test,model.predict(X_test))\n",
    "roc_auc = auc(fpr, tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % svc_roc_auc)\n",
    "plt.plot([0, 1], [0, 1],'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver operating characteristic')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear SVC model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create a RandomForest Classifier\n",
    "SVC=LinearSVC() \n",
    "#Train the model using the training sets y_pred=clf.predict(X_test)\n",
    "SVC.fit(X_train,y_train)\n",
    "\n",
    "y_pred=SVC.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.9957231726283048\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy\", metrics.accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7: Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "       male       1.00      0.99      1.00      1384\n",
      "     female       0.99      1.00      1.00      1188\n",
      "\n",
      "avg / total       1.00      1.00      1.00      2572\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(y_test, y_pred, target_names=data['gender'].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
